<div class="row">
  <div class="col">
    <div class="card">
      <div class="card-body">
        <h6 class="card-subtitle mb-2 text-muted">
          <i class="bi bi-brightness-high"></i>
          Light
        </h6>
        <h5 class="card-title" id="light-text">--</h5>
        <h7 class="card-subtitle mb-2 text-muted" id="light-update-text">Updated --:--</h7>
      </div>
    </div>
  </div>
  <div class="col">
    <div class="card">
      <div class="card-body">
        <h6 class="card-subtitle mb-2 text-muted">
          <i class="bi bi-droplet"></i>
          Moisture
        </h6>
        <h5 class="card-title" id="moisture-text">--</h5>
        <h7 class="card-subtitle mb-2 text-muted" id="moisture-update-text">Updated --:--</h7>
      </div>
    </div>
  </div>
</div>

<script src="https://unpkg.com/mqtt@4.0.1/dist/mqtt.min.js"></script>
<script>
  const deviceId = "{{device.deviceId}}"
  const deviceIp = "{{device.ip}}"
  const lightText = document.getElementById("light-text")
  const moistureText = document.getElementById("moisture-text")
  const lightUpdateText = document.getElementById("light-update-text")
  const moistureUpdateText = document.getElementById("moisture-update-text")

  const client = mqtt.connect(`ws://${deviceIp}:9001`); // TODO replace with pi ip-adress

  client.subscribe(`${deviceId}/lux`);
  client.subscribe(`${deviceId}/moisture`);
  client.on("message", (topic, byteArray) => {
    const message = JSON.parse(String.fromCharCode(...byteArray));
    console.log(message)
    if (topic === `${deviceId}/lux`) {
      lightText.innerText = `${message.lux.lux} lux`
      lightUpdateText.innerText = `Updated: ${message.lux.date}`
      let luxReport = message.luxReport
      const tbody = document.getElementById("lux-table")
      tbody.innerHTML = ""

      for (const [key, value] of Object.entries(luxReport)) {
        if (typeof value === "object") {
          let tr_title = document.createElement("tr")
          let th_title = document.createElement("th")
          let td_2 = document.createElement("td")
          tr_title.appendChild(th_title)
          tr_title.appendChild(td_2)
          th_title.innerText = key
          td_2.innerText = JSON.stringify(value).replace(/[{}\"[\]]/g, "").replace(/[:]/g, ": ").replace(/[,]/g, ", ");
          tbody.appendChild(tr_title)
        }
        else {
          let tr = document.createElement("tr")
          let th = document.createElement("th")
          let td = document.createElement("td")

          tbody.appendChild(tr)
          tr.appendChild(th)
          tr.appendChild(td)
          th.innerText = key
          td.attributes["colspan"] = 2
          td.innerHTML = value
        }
      }
    }
    if (topic === `${deviceId}/moisture`) {
      moistureText.innerText = `${message.moisture.moisture} farad`
      moistureUpdateText.innerText = `Updated: ${message.moisture.date}`
      let moistureReport = message.moistureReport

      const tbody = document.getElementById("moisture-table")
      tbody.innerHTML = ""
      for (const [key, value] of Object.entries(moistureReport)) {
        if (typeof value === "object") {
          let tr_title = document.createElement("tr")
          let th_title = document.createElement("th")
          let td_2 = document.createElement("td")
          tr_title.appendChild(th_title)
          tr_title.appendChild(td_2)
          th_title.innerText = key
          td_2.innerText = JSON.stringify(value).replace(/[{}\"[\]]/g, "").replace(/[:]/g, ": ").replace(/[,]/g, ", ");
          tbody.appendChild(tr_title)

        }
        else {
          let tr = document.createElement("tr")
          let th = document.createElement("th")
          let td = document.createElement("td")

          tbody.appendChild(tr)
          tr.appendChild(th)
          tr.appendChild(td)
          th.innerText = key
          td.innerHTML = value
        }
      }
    }
  });
</script>